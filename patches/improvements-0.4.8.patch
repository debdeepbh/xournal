Binärdateien xournal-0.4.8/po/de.gmo und myxournal-0.4.8/po/de.gmo sind verschieden.
diff -rup xournal-0.4.8/po/de.po myxournal-0.4.8/po/de.po
--- xournal-0.4.8/po/de.po	2012-08-06 02:38:13.000000000 +0200
+++ myxournal-0.4.8/po/de.po	2015-10-16 11:54:21.000000000 +0200
@@ -704,6 +704,14 @@ msgstr ""
 msgid "A4 (landscape)"
 msgstr "A4 (Querformat)"
 
+#: src/xo-interface.c:2898
+msgid "A5"
+msgstr ""
+
+#: src/xo-interface.c:2899
+msgid "A5 (landscape)"
+msgstr "A5 (Querformat)"
+
 #: src/xo-interface.c:2900
 msgid "US Letter"
 msgstr ""
@@ -1261,3 +1269,9 @@ msgstr "Grafik-Dateien"
 #, c-format
 msgid "Error opening image '%s'"
 msgstr "Fehler beim Öffnen der Grafik '%s'"
+
+
+# ../src/xo-interface.c:1588
+#, c-format
+msgid "New page after"
+msgstr "Neue Seite danach"
diff -rup xournal-0.4.8/src/xo-callbacks.c myxournal-0.4.8/src/xo-callbacks.c
--- xournal-0.4.8/src/xo-callbacks.c	2014-06-28 21:56:10.000000000 +0200
+++ myxournal-0.4.8/src/xo-callbacks.c	2015-10-16 11:57:55.000000000 +0200
@@ -1101,7 +1101,7 @@ on_journalNewPageAfter_activate        (
   pg = new_page(ui.cur_page);
   journal.pages = g_list_insert(journal.pages, pg, ui.pageno+1);
   journal.npages++;
-  do_switch_page(ui.pageno+1, TRUE, TRUE);
+  do_switch_page_and_scroll(ui.pageno+1, TRUE, TRUE, -1/2.);
 
   prepare_new_undo();
   undo->type = ITEM_NEW_PAGE;
@@ -1121,7 +1121,7 @@ on_journalNewPageEnd_activate          (
   pg = new_page((struct Page *)g_list_last(journal.pages)->data);
   journal.pages = g_list_append(journal.pages, pg);
   journal.npages++;
-  do_switch_page(journal.npages-1, TRUE, TRUE);
+  do_switch_page_and_scroll(journal.npages-1, TRUE, TRUE, -1/2.);
 
   prepare_new_undo();
   undo->type = ITEM_NEW_PAGE;
@@ -1257,13 +1257,15 @@ gboolean papersize_need_init, papersize_
 
 #define STD_SIZE_A4 0
 #define STD_SIZE_A4R 1
-#define STD_SIZE_LETTER 2
-#define STD_SIZE_LETTER_R 3
-#define STD_SIZE_CUSTOM 4
+#define STD_SIZE_A5 2
+#define STD_SIZE_A5R 3
+#define STD_SIZE_LETTER 4
+#define STD_SIZE_LETTER_R 5
+#define STD_SIZE_CUSTOM 6
 
 double unit_sizes[4] = {28.346, 72., 72./DISPLAY_DPI_DEFAULT, 1.};
-double std_widths[STD_SIZE_CUSTOM] =  {595.27, 841.89, 612., 792.};
-double std_heights[STD_SIZE_CUSTOM] = {841.89, 595.27, 792., 612.};
+double std_widths[STD_SIZE_CUSTOM] =  {595.27, 841.89, 420.92, 595.27 , 612., 792.};
+double std_heights[STD_SIZE_CUSTOM] = {841.89, 595.27, 595.27, 420.92 , 792., 612.};
 double std_units[STD_SIZE_CUSTOM] = {UNIT_CM, UNIT_CM, UNIT_IN, UNIT_IN};
 
 void
@@ -2482,7 +2484,7 @@ on_canvas_button_press_event           (
   // check whether we're in a page
   get_pointer_coords((GdkEvent *)event, pt);
   set_current_page(pt);
-  
+ 
   // can't paint on the background...
 
   if (ui.cur_layer == NULL && ui.toolno[mapping]!=TOOL_HAND) {
@@ -2525,7 +2527,8 @@ on_canvas_button_press_event           (
 
   // process the event
   
-  if (ui.toolno[mapping] == TOOL_HAND) {
+  if (ui.toolno[mapping] == TOOL_HAND || pt[0] < 0 || pt[0] > ui.cur_page->width || pt[1] < 0 || pt[1] > ui.cur_page->height) {
+	// hand tool selected OR outside page
     ui.cur_item_type = ITEM_HAND;
     get_pointer_coords((GdkEvent *)event, ui.hand_refpt);
     ui.hand_refpt[0] += ui.cur_page->hoffset;
diff -rup xournal-0.4.8/src/xo-file.c myxournal-0.4.8/src/xo-file.c
--- xournal-0.4.8/src/xo-file.c	2014-06-28 21:52:25.000000000 +0200
+++ myxournal-0.4.8/src/xo-file.c	2015-10-16 10:46:25.000000000 +0200
@@ -169,6 +169,8 @@ gboolean save_journal(const char *filena
   gzprintf(f, "<?xml version=\"1.0\" standalone=\"no\"?>\n"
      "<xournal version=\"" VERSION "\">\n"
      "<title>Xournal document - see http://math.mit.edu/~auroux/software/xournal/</title>\n");
+  //save last seen page number in file
+  gzprintf(f, "<lastpage number=\"%d\" />\n", ui.pageno); 
   for (pagelist = journal.pages; pagelist!=NULL; pagelist = pagelist->next) {
     pg = (struct Page *)pagelist->data;
     gzprintf(f, "<page width=\"%.2f\" height=\"%.2f\">\n", pg->width, pg->height);
@@ -514,6 +516,7 @@ struct Layer *tmpLayer;
 struct Item *tmpItem;
 char *tmpFilename;
 struct Background *tmpBg_pdf;
+int page_to_load; //NIKO
 
 GError *xoj_invalid(void)
 {
@@ -530,14 +533,27 @@ void xoj_parser_start_element(GMarkupPar
   char *tmpbg_filename;
   gdouble val;
   GtkWidget *dialog;
-  
-  if (!strcmp(element_name, "title") || !strcmp(element_name, "xournal")) {
+  if (!strcmp(element_name, "title") || !strcmp(element_name, "xournal")) {  
     if (tmpPage != NULL) {
       *error = xoj_invalid();
       return;
     }
     // nothing special to do
   }
+  else if (!strcmp(element_name, "lastpage")) {
+  	//handle loading the last seen page by NIKO
+  	has_attr=0;
+  	while(*attribute_names!=NULL) {
+  		if (!strcmp(*attribute_names, "number")) {
+  			//printf("pageno\n");
+  			//load number from pageno attribute
+  			page_to_load = atoi(*attribute_values);
+ 		}
+ 		//else *error = xoj_invalid();
+ 		attribute_names++;
+  		attribute_values++;
+ 	}
+  }	
   else if (!strcmp(element_name, "page")) { // start of a page
     if (tmpPage != NULL) {
       *error = xoj_invalid();
@@ -1032,6 +1048,7 @@ gboolean open_journal(char *filename)
   int len;
   gchar *tmpfn, *tmpfn2, *p, *q, *filename_actual;
   gboolean maybe_pdf;
+  page_to_load = -1; //by NIKO
   
   tmpfn = g_strdup_printf("%s.xoj", filename);
   if (ui.autoload_pdf_xoj && g_file_test(tmpfn, G_FILE_TEST_EXISTS) &&
@@ -1176,6 +1193,10 @@ gboolean open_journal(char *filename)
 
   g_free(filename_actual);
   ui.need_autosave = !ui.saved;
+   //if there is a page number saved in the file, jump to that, by NIKO
+   if (page_to_load !=-1) {
+    	do_switch_page(page_to_load, TRUE, FALSE);
+  }
   return TRUE;
 }
 
@@ -1687,11 +1708,14 @@ void save_mru_list(void)
 void init_config_default(void)
 {
   int i, j;
-
+  GtkPaperSize *size;
   DEFAULT_ZOOM = DISPLAY_DPI_DEFAULT/72.0;
   ui.zoom = ui.startup_zoom = 1.0*DEFAULT_ZOOM;
-  ui.default_page.height = 792.0;
-  ui.default_page.width = 612.0;
+  // passing NULL gives system's default paper size
+  size = gtk_paper_size_new (NULL);
+  ui.default_page.height = gtk_paper_size_get_height (size,GTK_UNIT_POINTS);
+  ui.default_page.width = gtk_paper_size_get_width (size,GTK_UNIT_POINTS);
+  gtk_paper_size_free(size);
   ui.default_page.bg->type = BG_SOLID;
   ui.default_page.bg->color_no = COLOR_WHITE;
   ui.default_page.bg->color_rgba = predef_bgcolors_rgba[COLOR_WHITE];
diff -rup xournal-0.4.8/src/xo-interface.c myxournal-0.4.8/src/xo-interface.c
--- xournal-0.4.8/src/xo-interface.c	2014-06-28 21:55:28.000000000 +0200
+++ myxournal-0.4.8/src/xo-interface.c	2015-10-16 11:54:50.000000000 +0200
@@ -288,7 +288,10 @@ create_winMain (void)
   GtkWidget *buttonNextPage;
   GtkWidget *buttonLastPage;
   GtkWidget *toolitem14;
+  GtkWidget *toolitem14_;
   GtkWidget *vseparator4;
+  GtkWidget *vseparator4_;
+  GtkWidget *buttonNewPageAfter;
   GtkWidget *buttonZoomOut;
   GtkWidget *buttonPageWidth;
   GtkWidget *buttonZoomIn;
@@ -1578,6 +1581,19 @@ create_winMain (void)
   vseparator4 = gtk_vseparator_new ();
   gtk_widget_show (vseparator4);
   gtk_container_add (GTK_CONTAINER (toolitem14), vseparator4);
+ 
+  buttonNewPageAfter = (GtkWidget*) gtk_tool_button_new_from_stock ("gtk-add");
+  gtk_widget_show (buttonNewPageAfter);
+  gtk_container_add (GTK_CONTAINER (toolbarMain), buttonNewPageAfter);
+  gtk_tool_item_set_tooltip (GTK_TOOL_ITEM (buttonNewPageAfter), tooltips, _("New page after"), NULL);  
+
+  toolitem14_ = (GtkWidget*) gtk_tool_item_new ();
+  gtk_widget_show (toolitem14_);
+  gtk_container_add (GTK_CONTAINER (toolbarMain), toolitem14_);
+  
+  vseparator4_ = gtk_vseparator_new ();
+  gtk_widget_show (vseparator4_);
+  gtk_container_add (GTK_CONTAINER (toolitem14_), vseparator4_);
 
   buttonZoomOut = (GtkWidget*) gtk_tool_button_new_from_stock ("gtk-zoom-out");
   gtk_widget_show (buttonZoomOut);
@@ -2515,7 +2531,10 @@ create_winMain (void)
                     NULL);
   g_signal_connect ((gpointer) buttonLastPage, "clicked",
                     G_CALLBACK (on_viewLastPage_activate),
-                    NULL);
+                    NULL);                             
+  g_signal_connect ((gpointer) buttonNewPageAfter, "clicked",
+                    G_CALLBACK (on_journalNewPageAfter_activate),
+                    NULL);      
   g_signal_connect ((gpointer) buttonZoomOut, "clicked",
                     G_CALLBACK (on_viewZoomOut_activate),
                     NULL);
@@ -2875,6 +2894,9 @@ create_winMain (void)
   GLADE_HOOKUP_OBJECT (winMain, buttonLastPage, "buttonLastPage");
   GLADE_HOOKUP_OBJECT (winMain, toolitem14, "toolitem14");
   GLADE_HOOKUP_OBJECT (winMain, vseparator4, "vseparator4");
+  GLADE_HOOKUP_OBJECT (winMain, buttonNewPageAfter, "buttonNewPageAfter");
+  GLADE_HOOKUP_OBJECT (winMain, toolitem14_, "toolitem14");
+  GLADE_HOOKUP_OBJECT (winMain, vseparator4_, "vseparator4");
   GLADE_HOOKUP_OBJECT (winMain, buttonZoomOut, "buttonZoomOut");
   GLADE_HOOKUP_OBJECT (winMain, buttonPageWidth, "buttonPageWidth");
   GLADE_HOOKUP_OBJECT (winMain, buttonZoomIn, "buttonZoomIn");
@@ -2979,9 +3001,11 @@ create_papersizeDialog (void)
 
   comboStdSizes = gtk_combo_box_new_text ();
   gtk_widget_show (comboStdSizes);
-  gtk_box_pack_start (GTK_BOX (hbox2), comboStdSizes, TRUE, TRUE, 5);
+  gtk_box_pack_start (GTK_BOX (hbox2), comboStdSizes, TRUE, TRUE, 7);
   gtk_combo_box_append_text (GTK_COMBO_BOX (comboStdSizes), _("A4"));
   gtk_combo_box_append_text (GTK_COMBO_BOX (comboStdSizes), _("A4 (landscape)"));
+  gtk_combo_box_append_text (GTK_COMBO_BOX (comboStdSizes), _("A5"));
+  gtk_combo_box_append_text (GTK_COMBO_BOX (comboStdSizes), _("A5 (landscape)"));
   gtk_combo_box_append_text (GTK_COMBO_BOX (comboStdSizes), _("US Letter"));
   gtk_combo_box_append_text (GTK_COMBO_BOX (comboStdSizes), _("US Letter (landscape)"));
   gtk_combo_box_append_text (GTK_COMBO_BOX (comboStdSizes), _("Custom"));
diff -rup xournal-0.4.8/src/xo-misc.c myxournal-0.4.8/src/xo-misc.c
--- xournal-0.4.8/src/xo-misc.c	2014-06-28 15:17:44.000000000 +0200
+++ myxournal-0.4.8/src/xo-misc.c	2015-10-16 10:50:49.000000000 +0200
@@ -1394,7 +1394,13 @@ void update_mappings_menu(void)
 
 void do_switch_page(int pg, gboolean rescroll, gboolean refresh_all)
 {
-  int i, cx, cy;
+  do_switch_page_and_scroll(pg, rescroll, refresh_all, 0.0);
+}
+
+void do_switch_page_and_scroll(int pg, gboolean rescroll, gboolean refresh_all, gdouble scroll_pagefraction)
+{
+  int i, cx, cy, visibleheight;
+  GtkAdjustment *adjust;
   struct Layer *layer;
   GList *list;
   
@@ -1418,8 +1424,11 @@ void do_switch_page(int pg, gboolean res
     gnome_canvas_get_scroll_offsets(canvas, &cx, &cy);
     if (ui.view_continuous == VIEW_MODE_HORIZONTAL)
       cx = ui.cur_page->hoffset*ui.zoom;
-    else
-      cy = ui.cur_page->voffset*ui.zoom;
+    else {
+        adjust = gtk_layout_get_vadjustment (GTK_LAYOUT(canvas));
+		visibleheight = gtk_adjustment_get_page_size (adjust);
+		cy = ui.cur_page->voffset*ui.zoom + visibleheight*scroll_pagefraction;
+	}
     gnome_canvas_scroll_to(canvas, cx, cy);
     
     if (refresh_all) 
@@ -1431,7 +1440,7 @@ void do_switch_page(int pg, gboolean res
 
 void update_page_stuff(void)
 {
-  gchar tmp[10];
+  gchar *tmp;
   GtkComboBox *layerbox;
   int i;
   GList *pglist;
@@ -1496,9 +1505,9 @@ void update_page_stuff(void)
   gtk_spin_button_set_range(spin, 1, journal.npages+1);
     /* npages+1 will be used to create a new page at end */
   gtk_spin_button_set_value(spin, ui.pageno+1);
-  g_snprintf(tmp, 10, _(" of %d"), journal.npages);
+  tmp = g_strdup_printf(_(" of %d"), journal.npages);
   gtk_label_set_text(GTK_LABEL(GET_COMPONENT("labelNumpages")), tmp);
-
+  g_free(tmp);
   layerbox = GTK_COMBO_BOX(GET_COMPONENT("comboLayer"));
   if (ui.layerbox_length == 0) {
     gtk_combo_box_prepend_text(layerbox, _("Background"));
@@ -1509,8 +1518,9 @@ void update_page_stuff(void)
     ui.layerbox_length--;
   }
   while (ui.layerbox_length < ui.cur_page->nlayers+1) {
-    g_snprintf(tmp, 10, _("Layer %d"), ui.layerbox_length++);
+    tmp = g_strdup_printf(_("Layer %d"), ui.layerbox_length++);
     gtk_combo_box_prepend_text(layerbox, tmp);
+    g_free(tmp);
   }
   gtk_combo_box_set_active(layerbox, ui.cur_page->nlayers-1-ui.layerno);
   ui.in_update_page_stuff = FALSE;
@@ -1626,7 +1636,7 @@ void update_toolbar_and_menu(void)
 
 void update_file_name(char *filename)
 {
-  gchar tmp[100], *p;
+  gchar *tmp, *p;
   if (ui.filename != NULL) g_free(ui.filename);
   ui.filename = filename;
   if (filename == NULL) {
@@ -1634,8 +1644,9 @@ void update_file_name(char *filename)
     return;
   }
   p = xo_basename(filename, FALSE);
-  g_snprintf(tmp, 100, _("Xournal - %s"), p);
+  tmp = g_strdup_printf( _("%s - Xournal"), p);
   gtk_window_set_title(GTK_WINDOW (winMain), tmp);
+  g_free(tmp);
   new_mru_entry(filename);
 
   if (p!=filename) {
diff -rup xournal-0.4.8/src/xo-misc.h myxournal-0.4.8/src/xo-misc.h
--- xournal-0.4.8/src/xo-misc.h	2014-06-28 10:22:21.000000000 +0200
+++ myxournal-0.4.8/src/xo-misc.h	2015-10-16 10:46:25.000000000 +0200
@@ -82,7 +82,9 @@ gchar *make_cur_font_name(void);
 void update_font_button(void);
 
 void update_mapping_linkings(int toolno);
+void do_switch_page_and_scroll(int pg, gboolean rescroll, gboolean refresh_all, gdouble scroll_pagefraction);
 void do_switch_page(int pg, gboolean rescroll, gboolean refresh_all);
+
 void set_cur_color(int color_no, guint color_rgba);
 void recolor_temp_text(int color_no, guint color_rgba);
 void process_color_activate(GtkMenuItem *menuitem, int color_no, guint color_rgba);
